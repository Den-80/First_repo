""" -------------------- """
    # Робота з датою
""" -------------------- """
"""
Основні можливості datetime:
- визначення поточної дати і часу;
- обчислення інтервалу між двома подіями;
- визначення дня тижня, високосного року для будь-якої дати у минулому не раніше року datetime.MINYEAR або в майбутньому не пізніше року datetime.MAXYEAR;
- порівняння дати і часу декількох подій за допомогою операторів порівняння;
- робота з часовими зонами, порівняння подій з урахуванням часових зон та переходу на літній/зимовий час;
- перетворення дати/часу в рядок і навпаки.
"""
import datetime

import datetime
now = datetime.datetime.now()
print(now)

# Роботу з модулями ми ще розглянемо, але об'єкт datetime в свій скрипт ми також можемо отримати, просто витягнув його з модуля:
from datetime import datetime

current_datetime = datetime.now()

print(current_datetime.year)
print(current_datetime.month)
print(current_datetime.day)
print(current_datetime.hour)
print(current_datetime.minute)
print(current_datetime.second)
print(current_datetime.microsecond)
print(current_datetime.tzinfo)

# В об'єкта datetime є методи, щоб отримати дату (без часу) та час (без дати):
from datetime import datetime

current_datetime = datetime.now()
print(current_datetime.date())
print(current_datetime.time())

# Є зворотний метод datetime.combine який використовується для створення нового об'єкта datetime шляхом комбінування об'єктів date та time.
datetime.datetime.combine(date_object, time_object)
"""
date_object: Об'єкт date, який містить інформацію про рік, місяць та день.
time_object: Об'єкт time, який містить інформацію про години, хвилини, секунди та мікросекунди.
"""
import datetime

# Створення об'єктів date і time
date_part = datetime.date(2023, 12, 14)
time_part = datetime.time(12, 30, 15)

# Комбінування дати і часу в один об'єкт datetime
combined_datetime = datetime.datetime.combine(date_part, time_part)

print(combined_datetime)  # Виведе "2023-12-14 12:30:15"

# Для створення об'єкта datetime з певною датою:
import datetime
specific_date = datetime.datetime(year=2020, month=1, day=7)
print(specific_date)  # Виведе "2020-01-07 00:00:00"

# Створення об'єкта datetime з конкретною датою і часом
specific_datetime = datetime.datetime(year=2020, month=1, day=7, hour=14, minute=30, second=15)
print(specific_datetime)  # Виведе "2020-01-07 14:30:15"

# Створення об'єкта datetime з конкретною датою і часом
specific_datetime = datetime.datetime(2020, 1, 7, 14, 30, 15)
print(specific_datetime)  # Виведе "2020-01-07 14:30:15"

"""
Метод weekday() використовується для отримання номера дня тижня для вказаної дати. 
Він повертає номер дня тижня, де понеділок має номер 0, а неділя - 6.
"""
from datetime import datetime

# Створення об'єкта datetime
now = datetime.now()

# Отримання номера дня тижня
day_of_week = now.weekday()

# Поверне число від 0 (понеділок) до 6 (неділя)
print(f"Сьогодні: {day_of_week}")  

"""
Для порівняння двох об'єктів datetime у Python, ви можете використовувати стандартні оператори порівняння, 
такі як == (рівність), != (нерівність), < (менше), > (більше), <= (менше або дорівнює) та >= (більше або дорівнює). 
Ці оператори дозволяють порівнювати дати та часи, щоб визначити, чи один об'єкт datetime передує, наступає або є точно таким самим як інший.
"""
from datetime import datetime

# Створення двох об'єктів datetime
datetime1 = datetime(2023, 3, 14, 12, 0)
datetime2 = datetime(2023, 3, 15, 12, 0)

# Порівняння дат
print(datetime1 == datetime2)  # False, тому що дати не однакові
print(datetime1 != datetime2)  # True, тому що дати різні
print(datetime1 < datetime2)   # True, тому що datetime1 передує datetime2
print(datetime1 > datetime2)   # False, тому що datetime1 не наступає за datetime2

""" ================================================== """
    # Ключові аспекти: методи роботи з датами і часом
""" ================================================== """
"""
1. datetime.now(): Метод повертає об'єкт datetime, який містить поточну дату та час.
2. datetime.date(): Цей метод повертає об'єкт date, який представляє лише дату (без часу).
3. datetime.time(): Метод повертає об'єкт time, який містить лише час (без дати).
4. datetime.combine(date, time): Цей метод використовується для об'єднання об'єктів date та time і створення нового об'єкта datetime.
5. datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0): Конструктор класу datetime дозволяє створити об'єкт datetime з конкретною датою та часом.
6. weekday(): Метод визначає номер дня тижня для вказаної дати, де понеділок має номер 0, а неділя - 6.

Методи порівняння об'єктів datetime:
== (рівність): Порівнює, чи є дві дати рівні.
!= (нерівність): Порівнює, чи дві дати не є рівними.
< (менше): Визначає, чи одна дата передує іншій.
> (більше): Визначає, чи одна дата наступає за іншою.
<= (менше або дорівнює): Порівнює, чи одна дата менше або дорівнює іншій.
>= (більше або дорівнює): Порівнює, чи одна дата більше або дорівнює іншій.
"""

""" ----------------------------------------- """
    # Робота з часовими проміжками timedelta
""" ----------------------------------------- """
"""
У модулі datetime є клас timedelta, який використовується для представлення різниці між двома моментами в часі. 
Об'єкти timedelta можуть представляти дні, години, хвилини, секунди та мікросекунди. 
Вони корисні для розрахунків, що включають додавання або віднімання часу від конкретних дат або порівняння часових інтервалів.

Об'єкт timedelta можна створити, задаючи тижні, дні, години, хвилини, секунди, мілісекунди і мікросекунди, 
передавши один або кілька з таких параметрів: days, seconds, microseconds, milliseconds, minutes, hours, weeks. 
Якщо якийсь параметр не заданий, то він дорівнює 0 за замовчуванням.
"""
from datetime import timedelta
delta = timedelta(
    days=50,
    seconds=27,
    microseconds=10,
    milliseconds=29000,
    minutes=5,
    hours=8,
    weeks=2
)
print(delta)

# Якщо відняти від одного datetime об'єкту інший, то отримаємо timedelta об'єкт. Він відповідає за відрізок часу між двома датами.
from datetime import datetime

seventh_day_2019 = datetime(year=2019, month=1, day=7, hour=14)
seventh_day_2020 = datetime(year=2020, month=1, day=7, hour=14)

difference = seventh_day_2020 - seventh_day_2019
print(difference)  # 365 days, 0:00:00
print(difference.total_seconds())  # 31536000.0

# Об'єкти timedelta можна створювати, щоб отримати дату/час віддалену від початкової.
from datetime import datetime, timedelta

now = datetime.now()
future_date = now + timedelta(days=10)  # Додаємо 10 днів до поточної дати
print(future_date)

"""
Але якщо потрібно робити обчислення або порівняння, засновані на послідовності дат, наприклад, для визначення кількості днів між двома датами.
Ми можемо використати метод toordinal(), який повертає порядковий номер дня, враховуючи кількість днів з 1 січня року 1 нашої ери (тобто з початку християнського календаря). 
Цей метод перетворює об'єкт datetime в ціле число, що представляє порядковий номер даного дня.
"""
from datetime import datetime

# Створення об'єкта datetime
date = datetime(year=2023, month=12, day=18)

# Отримання порядкового номера
ordinal_number = date.toordinal()
print(f"Порядковий номер дати {date} становить {ordinal_number}")

# Наприклад ми хочемо визначити скільки пройшло повних днів, коли Наполеон спалив Москву, а це відбулося 14 вересня 1812 року
from datetime import datetime

# Встановлення дати спалення Москви Наполеоном (14 вересня 1812 року)
napoleon_burns_moscow = datetime(year=1812, month=9, day=14)
# Поточна дата
current_date = datetime.now()
# Розрахунок кількості днів
days_since = current_date.toordinal() - napoleon_burns_moscow.toordinal()
print(days_since)

""" --------------------- """
    # Робота з timestamp
""" --------------------- """
"""
У контексті програмування та обробки даних, термін timestamp (часова мітка) використовується для вказівки конкретного моменту в часі. 
Це зазвичай представляється як кількість секунд (або мілісекунд/мікросекунд у деяких системах) з певної початкової дати, найчастіше з 1 січня 1970 року в UTC, це часовий пояс Гринвіча.
Детально про сам UTC поговоримо трошки далі. Поки timestamp для нас це просто прийнята константа і нічого особливого вона не означає.

Адже порівняти два числа завжди легше і швидше, ніж порівняти складну структуру дат і часів. 
Ви зустрінете використання timestamp в програмуванні, базах даних, логуванні подій та при збереженні інформації про часові моменти подій.

☝ timestamp є універсальним способом представлення часу, оскільки він не залежить від часових зон і календарних систем.
"""

# Конвертація datetime в timestamp
from datetime import datetime

now = datetime.now() # Поточний час
timestamp = datetime.timestamp(now) # Конвертація datetime в timestamp
print(f'Current time to timestamp = {timestamp}')  # Виведе timestamp поточного часу

""" -------------------------- """
    # Парсинг дати із рядка
""" -------------------------- """
"""
метод strftime використовується для форматування об'єктів дати та часу datetime у рядки за допомогою специфічних форматних кодів. 
Цей метод дає можливість представити дату та час у зручному для читання форматі або в форматі, що відповідає специфічним вимогам.

"""
datetime_object.strftime(format)
"""
Де datetime_object - це об'єкт datetime, а format - рядок формату, який визначає, як дата та час повинні бути представлені.
Кожен код у рядку формату починається з символу % і представляє певний компонент дати або часу. 
Ось деякі з найбільш використовуваних кодів:

%Y - рік з чотирма цифрами (наприклад, 2023).
%y - рік з двома цифрами (наприклад, 23).
%m - місяць як номер (наприклад, 03 для березня).
%d - день місяця як номер (наприклад, 14).
%H - година (24-годинний формат) (наприклад, 15).
%I - година (12-годинний формат) (наприклад, 03).
%M - хвилини (наприклад, 05).
%S - секунди (наприклад, 09).
%A - повна назва дня тижня (наприклад, Tuesday).
%a - скорочена назва дня тижня (наприклад, Tue).
%B - повна назва місяця (наприклад, March).
%b або %h - скорочена назва місяця (наприклад, Mar).
%p - AM або PM для 12-годинного формату.
"""
from datetime import datetime

now = datetime.now()

# Форматування дати і часу
formatted_date = now.strftime("%Y-%m-%d %H:%M:%S")
print(formatted_date) 

# Форматування лише дати
formatted_date_only = now.strftime("%A, %d %B %Y")
print(formatted_date_only)

# Форматування лише часу
formatted_time_only = now.strftime("%I:%M %p")
print(formatted_time_only)  

# Форматування лише дати
formatted_date_only = now.strftime("%d.%m.%Y")
print(formatted_date_only)

"""
Метод strptime в Python використовується для перетворення рядків у об'єкти datetime. 
Цей метод є протилежністю до strftime, який перетворює об'єкти datetime у рядки. 
strptime дозволяє аналізувати рядки, що містять дату та/або час, і перетворювати їх на структуровані об'єкти datetime за допомогою визначеного формату.
"""
datetime_object = datetime.strptime(string, format)
"""
де:
string - рядок, який містить дату та/або час.
format - рядок формату, який вказує, як розібрати string.

Коди форматування для strptime такі ж, як і для strftime. 
Наприклад, %Y представляє рік із чотирма цифрами, %m - місяць у вигляді двоцифрового числа тощо.
"""
from datetime import datetime

date_string = "2023.03.14" # Припустимо, у нас є дата у вигляді рядка
datetime_object = datetime.strptime(date_string, "%Y.%m.%d") # Перетворення рядка в об'єкт datetime
print(datetime_object)  # Виведе об'єкт datetime, що відповідає вказаній даті та часу

""" ----------------------------- """
    # Робота з ISO форматом дати
""" ----------------------------- """
"""
ISO формат дати відноситься до міжнародного стандарту представлення дат і часу, відомого як ISO 8601.
Формат дати в ISO 8601 виглядає як "YYYY-MM-DD", де:
YYYY - це рік (наприклад, 2023),
MM - місяць (наприклад, 01 для січня),
DD - день (наприклад, 31).

Формат часу в ISO 8601 виглядає як "HH:MM:SS", де:
HH - години (від 00 до 23),
MM - хвилини (від 00 до 59),
SS - секунди (від 00 до 59, іноді з додатковими десятковими частинами для мікросекунд).

Повне представлення дати та часу в ISO 8601 поєднує ці два формати з "T" між ними, наприклад "YYYY-MM-DDTHH:MM:SS". 
Це відділяє дату від часу і формат легко відрізняється від інших представлень.

ISO 8601 також підтримує представлення часових зон. 
Наприклад, "Z" на кінці означає UTC (координований всесвітній час), а відхилення від UTC може бути представлене як "+HH:MM" або "-HH:MM"

Модуль datetime надає зручні інструменти для роботи з датами та часом у форматі ISO 8601. 
Об'єкт datetime можна легко перетворити в рядок формату ISO 8601 за допомогою методу isoformat():
"""
from datetime import datetime

now = datetime.now() # Поточна дата та час
iso_format = now.isoformat() # Конвертація у формат ISO 8601
print(iso_format)

# Для зворотного перетворення рядка у форматі ISO 8601 на об'єкт datetime, можна використати метод fromisoformat():
from datetime import datetime

iso_date_string = "2023-03-14T12:39:29.992996"
date_from_iso = datetime.fromisoformat(iso_date_string) # Конвертація з ISO формату
print(date_from_iso)

# Метод isoweekday() у об'єкті datetime використовується для отримання дня тижня відповідно до ISO 8601. 
from datetime import datetime

now = datetime.now() # Створення об'єкта datetime
day_of_week = now.isoweekday() # Використання isoweekday() для отримання дня тижня
print(f"Сьогодні: {day_of_week}")  # Поверне число від 1 до 7, що відповідає дню тижня

"""
Також розглянемо корисний метод isocalendar(), 
який використовується для отримання кортежу, що містить ISO рік, номер тижня в році та номер дня тижня відповідно до ISO 8601.

Вивід isocalendar() - це кортеж (ISO_рік, ISO_тиждень, ISO_день_тижня), де:
- ISO_рік - це рік у форматі ISO.
- ISO_тиждень - номер тижня в році за ISO 8601 (від 1 до 53).
- ISO_день_тижня - день тижня за ISO 8601, де 1 означає понеділок, а 7 - неділю.
"""
from datetime import datetime
now = datetime.now() # Створення об'єкта datetime
iso_calendar = now.isocalendar() # Отримання ISO календаря
print(f"ISO рік: {iso_calendar[0]}, ISO тиждень: {iso_calendar[1]}, ISO день тижня: {iso_calendar[2]}")

""" ========================================================= """
    # Ключові аспекти: методи для роботи з ISO форматом дати
""" ========================================================= """
"""
Отже, коротко підсумуємо використання методів, які ми щойно розглянули:

- Метод isoformat() використовується для конвертації об'єкта datetime в рядок у форматі ISO 8601.
- Метод fromisoformat() використовується для конвертації рядка у форматі ISO 8601 в об'єкт datetime.
- Метод isoweekday() використовується для отримання дня тижня відповідно до ISO 8601.
- Метод isocalendar() використовується для отримання кортежу, що містить ISO рік, номер тижня в році та номер дня тижня відповідно до ISO 8601.
"""

""" ----------------------------- """
    # Робота з часовими зонами
""" ----------------------------- """

# Щоб вивести дату у форматі UTC це можна зробити, додавши інформацію про часову зону до об'єкта datetime:
from datetime import datetime, timezone

local_now = datetime.now()
utc_now = datetime.now(timezone.utc)

print(local_now)
print(utc_now)  # Виведе поточний час в UTC

"""
Щоб перетворити час з UTC в іншу часову зону, вам знадобиться визначити об'єкт timezone з відповідним зсувом. 
Наприклад, для перетворення UTC часу в час, що відповідає Східному часовому поясу США (UTC-5 годин), можна зробити наступне:
"""
from datetime import datetime, timezone, timedelta

utc_time = datetime.now(timezone.utc)
eastern_time = utc_time.astimezone(timezone(timedelta(hours=-5))) # Створення часової зони для Східного часового поясу (UTC-5)
print(eastern_time)  # Перетворює час UTC в час Східного часового поясу

# У цьому прикладі, ми створили об'єкт datetime з часовою зоною UTC+2 (Київ) та перетворили його в час UTC.
from datetime import datetime, timezone, timedelta
local_timezone = timezone(timedelta(hours=2)) # Припустимо, місцевий час належить до часової зони UTC+2
local_time = datetime(year=2023, month=3, day=14, hour=12, minute=30, second=0, tzinfo=local_timezone)
utc_time = local_time.astimezone(timezone.utc) # Конвертація локального часу в UTC
print(utc_time)  # Виведе час в UTC

"""
Стандарт ISO 8601 також підтримує часові зони. 
У Python це можна зробити, додавши інформацію про часову зону до об'єкта datetime:
"""
from datetime import datetime, timezone, timedelta

# Час у конкретній часовій зоні
timezone_offset = timezone(timedelta(hours=2))  # Наприклад, UTC+2
timezone_datetime = datetime(year=2023, month=3, day=14, hour=12, minute=30, second=0, tzinfo=timezone_offset)

# Конвертація у формат ISO 8601
iso_format_with_timezone = timezone_datetime.isoformat()
print(iso_format_with_timezone)

""" ================================================================ """
    # Ключові аспекти: методи для роботи з часовими зонами у Python
""" ================================================================ """
"""
Отже, ми розглянули такі методи та принципи роботи з ними:

Додавання інформації про часову зону до об'єкта datetime:
- Метод astimezone використовується для перетворення об'єкта datetime з однієї часової зони в іншу. 
Наприклад, це може бути використано для конвертації часу з UTC в інші часові зони.

Перетворення локального часу в час UTC:
- Спочатку призначаємо локальному часу відповідну часову зону.
- Використовуємо astimezone для конвертації в UTC. 
Цей підхід допомагає зручно працювати з локальним та всесвітнім часом.

Форматування у форматі ISO 8601 із часовою зоною:
- Використовуємо isoformat для отримання рядка з об'єкта datetime у форматі ISO 8601 з часовою зоною. 
Це корисно для представлення дати та часу у єдиному стандартізованому вигляді.
"""

""" ----------------- """
    # Робота з часом
""" ----------------- """
"""
Модуль time у Python надає функції для роботи з часом, зокрема з часовими мітками timestamps, 
паузами виконання для програми, а також іншими часовими операціями.
Розглянемо основні методи модуля time
"""
# 1. Метод time.time() повертає поточний час у секундах з 1 січня 1970 року (epoch time).
import time
current_time = time.time()
print(f"Поточний час: {current_time}")

# 2. Метод time.sleep(seconds) зупиняє виконання програми на вказану кількість секунд.
import time
print("Початок паузи")
time.sleep(5)
print("Кінець паузи")

# 3. Метод time.ctime([seconds]) перетворює часову мітку (кількість секунд) у зрозуміле для людини текстове представлення. Якщо аргумент не вказаний, використовується поточний час.
import time
current_time = time.time()
print(f"Поточний час: {current_time}")
readable_time = time.ctime(current_time)
print(f"Читабельний час: {readable_time}")

# 4. Метод time.localtime([seconds]) перетворює часову мітку в структуру struct_time у місцевій часовій зоні.
import time
current_time = time.time()
print(f"Поточний час: {current_time}")
local_time = time.localtime(current_time)
print(f"Місцевий час: {local_time}")
"""
Об'єкт time.struct_time в Python є іменованим кортежем, який використовується для представлення часу. 
Кожен елемент кортежу має особливе значення, що представляє певний компонент дати та часу:

tm_year - рік
tm_mon - місяць від 1 до 12
tm_mday - день місяця від 1 до 31
tm_hour - години від 0 до 23
tm_min - хвилини від 0 до 59
tm_sec - секунди від 0 до 59
tm_wday - день тижня від 0 до 6
tm_yday - день року від 1 до 366
tm_isdst - прапорець літнього часу. 0 означає, що літній час не діє, -1 - інформація відсутня, 1 - літній час діє
"""

# 5. Метод time.gmtime([seconds]) схожий на localtime, але повертає struct_time у UTC.
import time
current_time = time.time()
print(f"Поточний час: {current_time}")
local_time = time.gmtime(current_time)
print(f"Місцевий час: {local_time}")

# 6. Досить важливим є метод time.perf_counter(), який надає доступ до лічильника з високою точністю, та є ідеальним для вимірювання коротких інтервалів часу.
"""
Цей лічильник має найвищу доступну точність для вимірювання коротких часових періодів і використовується в основному для визначення часу виконання коду.
Як це працює? 
Метод time.perf_counter() повертає значення в секундах (як дійсне число) з деякого моменту, наприклад з моменту запуску програми, і це значення монотонно збільшується.
Це означає, що воно може використовуватися для точного вимірювання відрізків часу.

Давайте використаємо time.perf_counter() для вимірювання часу виконання деякого блоку коду:
"""
import time

start_time = time.perf_counter() # Записуємо час на початку виконання

# Виконуємо якусь операцію
for _ in range(1_000_000):
    pass  # Просто проходить цикл мільйон разів

end_time = time.perf_counter() # Записуємо час після виконання операції
execution_time = end_time - start_time 
print(f"Час виконання: {execution_time} секунд") # Розраховуємо та виводимо час виконання

"""
В цьому прикладі ми зустріли декілька нових речей. 
Перше, це що в Python представлення чисел з підкресленнями _ є способом зробити великі числа більш читабельними. 
Наприклад, число 1_000_000 еквівалентне 1000000.

Друге, це оператор pass, який використовується як заповнювач або "пуста" інструкція. 
Він не робить нічого і використовується там, де синтаксис вимагає наявності хоча б однієї інструкції, але вам не потрібно виконувати жодних дій.
Є і інші випадки використання pass наприклад у функціях.
"""

""" ======================================================= """
    # Ключові аспекти: основні методи модуля time в Python
""" ======================================================= """
"""
1. time.time(): Повертає поточний час у секундах з 1 січня 1970 року (epoch time).
2. time.sleep(seconds): Зупиняє виконання програми на вказану кількість секунд.
3. time.ctime([seconds]): Перетворює часову мітку в текстове представлення, зрозуміле для людини.
4. time.localtime([seconds]): Перетворює часову мітку в структуру struct_time у місцевій часовій зоні.
5. time.gmtime([seconds]): Аналогічно localtime, але повертає struct_time у форматі UTC.
6. time.perf_counter(): Повертає лічильник з високою точністю для вимірювання коротких інтервалів часу.
"""


