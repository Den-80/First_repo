""" ------------------------------------------------- """
    # Регулярні вирази та розширена робота з рядками
""" ------------------------------------------------- """

# Для створення рядків можна скористатися одинарними або подвійними лапками:
this_is_string = "Hi there!"
the_same_string = 'Hi there!'
this_is_string == the_same_string# True

# Але що робити, якщо нам потрібен текст із перенесенням рядків (коли в тексті більше одного рядка)? Для цього можна скористатися потрійним повторенням лапок:
text = """This is first line
And second line
Last third line"""

song = '''Jingle bells, jingle bells
Jingle all the way
Oh, what fun it is to ride
In a one horse open sleigh'''
# Коли інтерпретатор виявляє лапки, повторені тричі, він сприймає усі символи до наступних трьох лапок, які закривають рядок, як символи рядка.

# Зворотна ситуація, у вас є довгий рядок, який не повинен містити перенесень, але в коді його незручно відобразити одним рядком.
one_line_text = "Textual data in Python is handled with str objects, or strings. Strings are immutable sequences of Unicode code points. String literals are written in a variety of ways: single quotes, double quotes, triple quoted."
# Щоб структурувати код і не додавати зайвих перенесень, ви можете розбити одну рядкову змінну на декілька частин:
one_line_text = "Textual data in Python is handled with str objects," \
                " or strings. Strings are immutable sequences of Unicode" \
                " code points. String literals are written in a variety " \
                " of ways: single quotes, double quotes, triple quoted."
# Зверніть увагу на символ \ в кінці першого та другого рядка коду, він вказує інтерпретатору ігнорувати закінчення рядка і продовжити відразу з наступного.

"""
У Python, коли ви поміщаєте два рядкових літерали поруч, вони автоматично конкатенуються (об'єднуються в один рядок). Це відомо як неявна конкатенація рядків:
Вираз ліворуч та вираз праворуч — це два рівнозначні записи одного і того самого тексту 'spam eggs' і, з погляду Python, — вони нерозрізнені. 
У нашому випадку, "spam " та "eggs" - це два окремих рядкових літерала, але коли вони розміщені один за одним без оператора додавання (+), Python автоматично об'єднує їх у один рядок.
"""
("spam " "eggs") == "spam eggs"  # True

# Ця особливість часто використовується для зручності, особливо при написанні довгих рядків і тому змінну one_line_text можна записати наступним чином.
one_line_text = ("Textual data in Python is handled with str objects,"
                " or strings. Strings are immutable sequences of Unicode"
                " code points. String literals are written in a variety "
                " of ways: single quotes, double quotes, triple quoted.")

"""
Неявна конкатенація рядків - це корисна особливість мови Python, яка дозволяє писати більш чистий і читабельний код, 
особливо коли працюєте з довгими рядками або рядками, що формуються на основі декількох частин.
Наприклад, в майбутньому, це дуже допомагає при створенні SQL запитів до бази даних:
"""
query = ("SELECT * "
         "FROM some_table "
         "WHERE condition1 = True "
         "AND condition2 = False")

""" --------------------- """
    # Спеціальні символи
""" --------------------- """
"""
Спеціальні символи в рядках у Python, відомі також як екрановані символи або escape-символи, 
використовуються для представлення певних керувальних послідовностей або для включення символів, які не можна ввести безпосередньо у рядок коду.

Ці символи починаються з оберненої косої риски (backslash, \), після якої йде один або кілька символів, що визначають спеціальну послідовність. 
Це означає, що наступний за ним знак потрібно сприймати як спеціальний символ, а не буквально.

Ось основні керувальні символи які необхідно знати:
\n = перенесення рядка
\f = перенесення сторінки
\r = повернення каретки
\t = горизонтальна табуляція
\v = вертикальна табуляція
"""
# Керувальний символ \b забій (backspace).
print("Hello\bWorld")
# Також якщо нам треба виконати виведення зворотної косої риски.
print("Hello\\World")
# Щоб екранувати одинарні та подвійні лапки та дозволити використовувати лапки всередині рядкових літералів.
print('It\'s a beautiful day')
print("He said, \"Hello\"")


""" ---------------- """
    # Методи рядків
""" ---------------- """
# Для пошуку деякого символу або підрядка у рядку можна скористатися методом find:
s = "Hi there!"
start = 0
end = 7
print(s.find("er", start, end)) # 5
print(s.find("q")) # -1

# Ще один метод пошуку підрядка у рядку дуже схожий на find — це index. Основна відмінність полягає в тому, що якщо index не знайде підрядок, то викличе виняток ValueError.
# Якщо вам потрібно здійснити пошук підрядка у рядку справа, а не зліва як у find, то для цього існує метод rfind:
s = 'Some words'
print(s.find("o")) # 1
print(s.rfind('o')) # 6

# І "правий" аналог index — rindex:
s = 'Some words'
print(s.index("o")) # 1
print(s.rindex('o')) # 6

# Метод split() 
str.split(separator=None, maxsplit=-1)
"""
у Python використовується для розбиття рядка на список підрядків на основі вказаного роздільника. 
Якщо роздільник не вказаний, за замовчуванням використовується пробіл.
де:
separator - роздільник, за яким слід розділяти рядок. Якщо не вказано, рядок розділяється за будь-яким пробілом.
maxsplit - максимальна кількість розділень. Значення -1 означає "без обмежень".
"""

text = "apple,banana,cherry"
result = text.split(',')
print(result)  # Виведе: ['apple', 'banana', 'cherry']

"""
Усі рядки незмінні, і якщо ми хочемо модифікувати рядок, є тільки один спосіб — створити новий рядок на основі вихідного. 
Усі методи, які якось "модифікують" рядки, насправді повертають нові рядки, ніяк не змінюючи оригінальний.
"""

# Метод join() 
string.join(iterable)
"""
у Python використовується для об'єднання послідовності рядків 
(наприклад, списку або кортежу) в один рядок з використанням вказаного роздільника. 
Цей метод викликається на рядковому об'єкті, який служить роздільником:
де:
string - рядок роздільник, який буде вставлений між елементами послідовності.
iterable - послідовність, список або кортеж рядків, які потрібно об'єднати.

По суті метод join(), є зворотною операцією до методу split.
"""

elements = ['earth', 'air', 'fire', 'water']
result = ', '.join(elements)
print(result)  # Виведе: 'earth, air, fire, water'

# Метод strip() 
"""
Якщо потрібно видалити зайві пробіли на початку і в кінці рядка, є спеціальний метод strip:
У цього метода є два "брати":
- "лівий", lstrip, видаляє тільки пробіли на початку рядка;
- "правий", rstrip, видаляє тільки пробіли в кінці рядка.
"""
clean = '   spacious   '.strip()
print(clean) # spacious

# Метод replace()
str.replace(old, new, count=-1)
"""
у Python використовується для заміни підрядка на інший підрядок у рядку. 
Цей метод повертає новий рядок, де кожне входження вказаного підрядка замінено на інший підрядок.
де:
old - підрядок, який потрібно замінити.
new - підрядок, на який потрібно замінити.
count - лічильник максимальної кількості замін. Якщо не вказано або вказано -1, замінюються всі входження.

Загалом метод replace() широко використовується для обробки тексту в Python.
Та може бути корисним коли необхідно:
- Виправлення помилок у тексті
- Заміну специфічних символів або слів
- Форматування даних для виводу
- Видалення або заміна чутливих даних перед виводом або збереженням
"""
text = "Hello world"
new_text = text.replace("world", "Python")
print(new_text) 

#Тут метод replace() замінює перші два входження слова "fish" на слово "bird".
text = "one fish, two fish, red fish, blue fish"
new_text = text.replace("fish", "bird", 2)
print(new_text)  # one bird, two bird, red fish, blue fish

# Метод replace() також застосовують для видалення підрядка
text = "Hello, world!"
new_text = text.replace(" world", "")
print(new_text) # Hello,!

# метод removeprefix()
"""
Для видалення фіксованої послідовності на початку рядка 
"""
print('TestHook'.removeprefix('Test')) # Hook
print('TestHook'.removeprefix('Hook')) # TestHook

# Є парний метод для видалення послідовності в кінці рядка, removesuffix:
print('TestHook'.removesuffix('Test'))
print('TestHook'.removesuffix('Hook'))

"""
Розглянемо наступну задачу та використаємо основні інструменти для роботи з рядками - методи split() та replace(). 
Ви маєте URL пошукового запиту, і ваше завдання - видобути та обробити параметри цього запиту. 
Наприклад пошуковий запит "Cat and dog"
<https://www.google.com/search?q=Cat+and+dog&ie=utf-8&oe=utf-8&aq=t>
Параметри в URL зазвичай слідують після символу ? та розділені символами &. 
Кожен параметр складається з ключа та значення, розділених символом =.

Нам треба написати код, який обробляє URL пошукового запиту, 
щоб видобути параметри запиту та перетворити їх у формат, з яким легше працювати в Python. 
"""
# Тож почнемо. Спочатку нам треба отримати частини запиту з URL:
url_search = "<https://www.google.com/search?q=Cat+and+dog&ie=utf-8&oe=utf-8&aq=t>"
_, query = url_search.split('?')
print(query)
# Далі ми додамо до нашого коду обробку параметрів запиту:
url_search = "<https://www.google.com/search?q=Cat+and+dog&ie=utf-8&oe=utf-8&aq=t>"
_, query = url_search.split('?')
print(query)

obj_query = {}
for el in query.split('&'):
    key, value = el.split('=')
    obj_query.update({key: value.replace('+', ' ')})
print(obj_query)
# Такий підхід часто використовується у веб-розробці та обробці даних для роботи з інформацією, отриманою з інтернет-запитів.

# Метод isdigit()
"""
використовується для перевірки, чи складається рядок повністю з цифр. 
Цей метод повертає True, якщо всі символи в рядку є цифрами та рядок складається принаймні з одного символу, 
інакше повертає False.
"""
number = "12345"
print(number.isdigit())  # Виведе: True

text = "Number123"
print(text.isdigit())  # Виведе: False

# Виконувати перевірку на цифрові символи в рядку.
for char in "Hello 123":
    if char.isdigit():
        print(f"'{char}' - це цифра")
    else:
        print(f"'{char}' - не цифра")

# Метод translate()
"""
в Python використовується для перетворення рядків шляхом заміни певних символів іншими символами. 
Цей метод дозволяє вам вказати, які саме символи слід замінити та на що замінити, використовуючи так звану "таблицю перекладу" - спеціальний словник, що визначає відображення замін.
Тому перш ніж використовувати translate(), нам потрібно створити таблицю перекладу. 
Це можна зробити за допомогою методу str.maketrans(), який приймає два аргументи:
1. Рядок символів, які потрібно замінити.
2. Рядок символів, на які потрібно замінити.
Довжина обох рядків має бути однаковою, оскільки вони визначають взаємну відповідність символів.
"""
intab = "aeiou"
outtab = "12345"
trantab = str.maketrans(intab, outtab)

str = "This is string example"
print(str.translate(trantab)) # "Th3s 3s str3ng 2x1mpl2"

"""
Метод translate() також може використовуватися для видалення певних символів із рядка. 
Для цього передайте в maketrans() третій аргумент - рядок символів, які потрібно видалити.
"""
intab = "aeiou"
trantab = str.maketrans('', '', intab)

str = "This is string example"
print(str.translate(trantab)) # "Ths s strng xmpl"

"""
Метод може бути використаний для різноманітних завдань з обробки тексту. 
Нормалізація тексту, це коли треба замінити або видалити специфічні символи. 
Операції кодування та декодування - створення простих кодувань шляхом заміни символів. 
Фільтрація тексту шляхом видалення небажаних символів, наприклад, пунктуації або цифр.

Метод є чудовим вибором для складніших завдань з обробки та трансформації рядків. 
Розглянемо пару більш складних задач.
Наприклад нам треба розробити програму, яка конвертує рядок, 
що містить шістнадцяткові числа (в якості окремих символів), у відповідний двійковий код.

Програма повинна обробляти як великі, так і малі літери шістнадцяткових чисел і перетворювати кожен символ на його чотирибітове двійкове представлення.
"""
symbols = "0123456789ABCDEF"
code = [
        '0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111',
        '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'
        ]

MAP = {}

for s, c in zip(symbols, code):
    MAP[ord(s)] = c
    MAP[ord(s.lower())] = c

result = "34 DF 56 AC".translate(MAP)
print(result)

"""
Функція ord() в Python - це вбудована функція, яка використовується для отримання Unicode коду символу. 
Коли ви працюєте з текстом в Python, кожен символ у рядку має відповідний числовий код - Unicode. 
Функція ord() приймає символ і повертає його Unicode код, який є цілим числом.
"""

# Наступний приклад, це розробити програму, яка перетворює вхідний текстовий рядок на відповідний код мови Морзе.
morze_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
              'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
              'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
              'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
              'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---',
              '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...',
              '8': '---..', '9': '----.'}

# Перетворення ключів словника на Unicode коди
table_morze_dict = {}
for k, v in morze_dict.items():
    table_morze_dict[ord(k)] = v

string = "Hello world"

result = ""

for ch in string:
    result = result + ch.upper().translate(table_morze_dict)

print(result)

""" ----------------------- """
    # Форматування рядків
""" ----------------------- """
"""
Будь-яке число можна записати кількома варіантами запису:
- десятковий запис
- двійкове представлення
- шістнадцяткове представлення
- наукова нотація
- з фіксованою точністю (кількістю знаків після коми)
та інші.
"""
# Наприклад, вивести числа від 0 до 7 в десятковому, шістнадцятковому, вісімковому і двійковому представленні можна наступним чином:
for i in range(8):
    s = f"int: {i:d};  hex: {i:#x};  oct: {i:#o};  bin: {i:#b}"
    print(s)

# Форматування за допомогою виразів у f-рядках дозволяє не тільки вставляти значення змінних у рядок, а й форматувати ці значення за допомогою спеціальних вказівок.
price = 19.99
quantity = 3
total = f"Total: {price * quantity:.2f}"
print(total)
"""
У виразі :.2f:
- : вводить специфікацію формату.
- .2 означає, що після десяткової крапки має бути виведено дві цифри.
- f вказує на формат дійсного числа.
"""

"""
Крім того, при створенні рядків буває корисним відформатувати рядок так, щоб знаки на різних рядках були один під одним (додати пробілів),
додати заповнення в рядки для того, щоб результат був завжди однієї і тієї самої довжини. 
Або вивести квадрати та куби чисел до 12 у вигляді таблиці, відцентрувавши значення у стовпцях по 10 символів шириною:
"""
width = 5
for num in range(12):
    print(f'{num:^10} {num**2:^10} {num**3:^10}')

"""
Вирівнювання та ширина поля в f-рядках в Python дозволяють контролювати, 
як текст або числа відображаються у рядку, включаючи вирівнювання (ліворуч, праворуч, по центру) та загальну ширину поля, 
яка використовується для відображення вмісту. 
Ці можливості особливо корисні, коли вам потрібно створити впорядкований, охайний текстовий вивід.

Ширина поля вказує мінімальну ширину поля, в яке буде поміщено вміст. 
Якщо вміст коротший за ширину поля, він буде доповнений пробілами.

Вирівнювання визначає, як вміст буде вирівняний всередині вказаної ширини поля. Можливі варіанти вирівнювання:
<: Вирівнювання вмісту по лівому краю.
>: Вирівнювання вмісту по правому краю.
^: Вирівнювання вмісту по центру.
=: Використовується для вирівнювання чисел, при цьому знак (якщо він є) відображається зліва, а число - по правому краю поля.
"""
name = "Alice"
formatted = f"{name:>10}"
print(formatted)  # Виведе: '     Alice' (вирівнювання праворуч)

"""
Також корисним є форматування відсотків за допомогою f-рядків, що дозволяє зручно відображати числа як відсотки. 
Для цього використовується специфікатор формату %, який множить число на 100 і додає символ відсотка % до рядка. 
Це особливо корисно при роботі з даними, де потрібно представляти частки або пропорції у форматі відсотків.

Форматування відсотків у f-рядках виглядає так:
f"{value:<ширина>.<точність>%}"
де:
value - значення, яке потрібно перетворити у відсотки.
<ширина> - загальна ширина поля; необов'язково.
<точність> - кількість знаків після десяткової крапки; необов'язково.
"""
completion = 0.756
formatted = f"{completion:.1%}"
print(formatted)  # Виведе: '75.6%'

progress = 0.5
formatted = f"{progress:.0%}"
print(formatted) # Виведе: '50%'
